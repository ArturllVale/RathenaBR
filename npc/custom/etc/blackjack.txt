// ===== Script rAthena ===========================================
// = Black Jack
// ===== Por: =============================================== =========
// = kobra_k88
// ===== Traduzido Por: =============================================== =========
// = Guru
// ===== Versão Atual: ===========================================
// = 1.0
// ===== Compatível com: =========================================
// = Projeto rAthena
// ===== Descrição: ===============================================
// = Jogo de cartas Black Jack. Jogabilidade baseada fora do cassino padrão
// = regras de black jack. O revendedor deve ter pelo menos 17 para ficar e irá
// = permanece automaticamente em 17 e acima. O jogador deve ter pelo menos
// = 13 para ficar. Ases contaram como 11 ou 1. Opção para "Dobrar".
// = Atualmente não permite "seguro" ou "divisão"
// = de pares.
// ===== Comentários adicionais: ===================================
// = 1.0 Primeira versão.
//============================================================

cmd_in02,188,89,1	script	Black Jack	57,{
	mes "[Banca]";
	mes "Olá! Você gostaria de jogar uma partida de Black Jack?";
M_Menu:
	next;
	menu "^ff9933Regras do jogo^000000",M_0, "^cc6666Vamos Jogar^000000",L_Play, "^666666Não, obrigado^000000",M_End;

M_0:
	mes "[Banca]";
	mes "O que você gostaria de saber?";
sM_Menu0:
	next;
	menu "O básico",sM_0a, "Ganhando e perdendo",sM_0b, "'Apostar'",sM_0c,
	"Valor Ace",sM_0d, "Nada",M_Menu;

sM_0a:
	mes "[Banca]";
	mes "Black Jack é um jogo de cartas em que o objetivo é conseguir 21, ou";
	mes "perto de 21 pontos quanto possível, sem passar de 21.";
	next;
	mes "[Banca]";
	mes "Antes do jogo começar, o jogador deve fazer uma aposta. Assim que a aposta";
	mes "for feita, a Banca e o jogador recebem 2 cartas";
	mes "cada. Dependendo de quais cartas você tem, você pode escolher ^5533FF'ficar'^000000,";
	mes "ou você pode escolher ^5533FF'puxar'^000000.";
	next;
	mes "[Banca]";
	mes "Quando você escolhe 'ficar', você está dizendo a Banca que você não";
	mes "precisa de mais cartas. Isso permite que a Banca puxe se ele/ela";
	mes "quer. Para ficar, você deve ter ^FF3355pelo menos 13 pontos^000000. a";
	mes "Banca só pode ficar quando tiver ^ FF3355 17 pontos ou mais^000000.";
	next;
	mes "[Banca]";
	mes "Quando você escolhe 'puxar', você está dizendo a Banca que você quer";
	mes "outra carta. Puxando mais cartas, você pode aumentar seu pontos";
	mes "total. se seus pontos ^FF3355for menos de 21^000000 você pode puxar uma";
	mes "carta do baralho.";
	goto sM_Menu0;
sM_0b:
	mes "[Banca]";
	mes "Existem 3 maneiras de ganhar e perder no Black Jack.";
	next;
	mes "[Banca]";
	mes "1.) No final de uma rodada de Black Jack, se você tiver mais pontos";
	mes "que a Banca você vai ganhar a rodada. Por outro lado, se você tiver";
	mes "menos pontos que a Banca você perderá.";
	next;
	mes "[Banca]";
	mes "2.) Se você puxar uma carta que faça seu total de pontos passar de 21, você";
	mes "irá automaticamente perder a rodada. Isso é chamado de ^5533FF'fracasso'^000000. E se";
	mes "a Banca rebenta então você ganhará a rodada.";
	next;
	mes "[Banca]";
	mes "3.) Se você tem um total de pontos de 21 com as 2 primeiras cartas, você";
	mes "vai ganhar automaticamente a rodada. Isso é chamado de ^5533FF'Black Jack'^000000";
	mes "e acontece quando você recebe um carta 'Ás' e um 'valor 10'. Se o";
	mes "Banca recebe um Black Jack e automaticamente ganha a rodada.";
	next;
	mes "[Banca]";
	mes "4.) Além de ganhar e perder, você pode empatar com a Banca. E se";
	mes "você e a Banca têm o mesmo total de pontos no final da";
	mes "rodada, isso resultará em um empate sem vencedor e sem perda ou ganho";
	mes "em zeny.";
	next;
	mes "[Banca]";
	mes "Isso é chamado de ^5533FF'push'^000000 with the Banca. Além disso";
	mes "se aplica a você e a Banca tendo Black Jack ao mesmo";
	mes "Tempo.";
	goto sM_Menu0;
sM_0c:
	mes "[Banca]";
	mes "A opção 'Dobrar' permite que você dobre sua aposta atual,";
	mes "mas com a desvantagem de que você só será capaz de puxar um";
	mes "carta adicional. Esta opção está disponível apenas no início de";
	mes "cada roude.";
	next;
	mes "[Banca]";
	mes "Um exemplo de quando dobrar é útil é quando";
	mes "suas primeiras 2 cartas dão a você um total de 11 pontos. Você tem um bom";
	mes "chance de obter 21 ou 20 com a próxima carta que você tirar. este";
	mes "seria uma boa mão para dobrar.";
	goto sM_Menu0;
sM_0d:
	mes "[Banca]";
	mes "A carta 'Ás' é uma carta única no jogo Black Jack porque";
	mes "pode ter 2 valores. Um Ás pode ser contado como 11 pontos,";
	mes "ou apenas 1 ponto. Por exemplo, se você tivesse um Ás e um 4, isso seria";
	mes "15 ou 5 pontos.";
	next;
	mes "[Banca]";
	mes "Se você decidir ficar, o Ás será automaticamente contado como";
	mes "11 pontos para dar a você 15 pontos no total.";
	next;
	mes "[Banca]";
	mes "Se você tivesse decidido puxar e receber um 9, o ás seria";
	mes "será automaticamente contado como 1 ponto para dar a você um total de 14";
	mes "pontos. Se o Ás fosse contado como 11 pontos, você teria um";
	mes "total de pontos acima de 21 e teria perdido.";
	next;
	mes "[Banca]";
	mes "É por causa da flexibilidade que você tem com o 'Ás' que torna";
	mes " a carta mais poderosa do jogo.";
	goto sM_Menu0;
M_End:
	mes "[Banca]";
	mes "Sinta-se à vontade para voltar a qualquer hora";
	close;

//================
L_Play:
	mes "[Banca]";
	mes "Por favor, façam suas apostas...";
	next;
	menu "2z",M_1a, "10z",M_1b, "20z",M_1c, "100z",M_1d, "Muito rico para o meu sangue...",M_End;

M_1a:
	if(Zeny < 2) goto sL_NotEnuf;
	set @bet, 2;
	goto L_Cont0;
M_1b:
	if(Zeny < 10) goto sL_NotEnuf;
	set @bet, 10;
	goto L_Cont0;
M_1c:
	if(Zeny < 20) goto sL_NotEnuf;
	set @bet, 20;
	goto L_Cont0;
M_1d:
	if(Zeny < 100) goto sL_NotEnuf;
	set @bet, 100;
	goto L_Cont0;

sL_NotEnuf:
	mes "[Banca]";
	mes "Sinto muito, mas você não tem zeny suficiente para fazer essa aposta.";
	close;

L_Cont0:
	mes "(as cartas estão sendo distribuídas)";
	next;
	deletearray $@card[0],13;
	set @BancaTurn, 0;
	set @numP, 0;
	set @numD, 0;
	set @pAce, 0;
	set @dAce, 0;
	callsub sF_GetCards, @numP, @playCard[@numP], @playCard$[@numP], @pAce;
	callsub sF_GetCards, @numP, @playCard[@numP], @playCard$[@numP], @pAce;
	callsub sF_GetCards, @numD, @dealCard[@numD], @dealCard$[@numD], @dAce;
	callsub sF_GetCards, @numD, @dealCard[@numD], @dealCard$[@numD], @dAce;

//==============
L_Start:
	callsub sF_GetTot;

	mes "- Aqui está ^FF5533Banca^000000 cartas:";
	if (@numD==2) callsub sF_D2cards;
	if (@numD==3) callsub sF_D3cards;
	if (@numD==4) callsub sF_D4cards;
	if (@numD==5) callsub sF_D5cards;
	mes "    A Banca tem: ^FF5533"+@dealTot+"^000000";
	mes " ";
	mes "- Aqui estão ^5533FFsuas^000000 cartas:";
	if (@numP==2) callsub sF_P2cards;
	if (@numP==3) callsub sF_P3cards;
	if (@numP==4) callsub sF_P4cards;
	if (@numP==5) callsub sF_P5cards;
	if(@pAce != 1 || @playTot == 21) mes "    Você tem: ^5533FF" +@playTot+ "^000000";
	if(@pAce == 1 && @playTot != 21) mes "    Você tem: ^5533FF" +@playTot+ "^000000, ou ^5533FF" +(@playTot-10)+ "^000000";
	next;
	if(@playTot==21 && @dealTot==21) goto sL_Push;
	if(@numP==2 && @playTot == 21) goto sL_Win;
	if(@numD==2 && @dealTot == 21) goto sL_Lose;
	if(@playTot > 21) goto sL_Lose;
	if(@dealTot > 21) goto sL_Win;
	if(@numP==2 && @BancaTurn==0) menu "Pedir Carta",M_Hit, "Fique",M_Stay, "Apostar",M_Double;
	if(@BancaTurn == 0) menu "Pedir Carta",M_Hit, "Fique",M_Stay;

M_Stay:
	mes "[Banca]";
	if(@playTot < 13) goto sL_PlayToLow;
	if(@dealTot > 16) mes "A Banca fica.";
	if(@dealTot > 16 || @numD == 5) goto L_Check;
	mes "A Banca vai puxar";
	next;
	callsub sF_GetCards, @numD, @dealCard[@numD], @dealCard$[@numD], @dAce;
	set @BancaTurn, 1;
	goto L_Start;

sL_PlayToLow:
	mes "Sinto muito, mas você não tem um total alto o suficiente para ficar. Você deve puxar.";
	next;
	goto M_Hit;

M_Hit:
	if(@numP == 5) goto M_Stay;
	callsub sF_GetCards, @numP, @playCard[@numP], @playCard$[@numP], @pAce;
	goto L_Start;
M_Double:
	mes "[Banca]";
	mes "O jogador escolheu Dobrar. Sua aposta atual será";
	mes "dobrada e você só poderá retirar 1 carta extra.";
	next;
	set @BancaTurn, 1;
	set @bet, @bet*2;
	callsub sF_GetCards, @numP, @playCard[@numP], @playCard$[@numP], @pAce;
	goto L_Start;

//=============
L_Check:
	next;
	if(@playTot < @dealTot) goto sL_Lose;
	if(@playTot == @dealTot) goto sL_Push;

sL_Win:
	mes "[Banca]";
	mes "Parabéns, você ganhou!";
	next;
	set Zeny, Zeny + @bet;
	goto L_Play;
sL_Lose:
	mes "[Banca]";
	mes "Sinto muito, mas você perdeu.";
	set Zeny, Zeny - @bet;
	next;
	goto L_Play;
sL_Push:
	mes "[Banca]";
	mes "É um empurrão. Você empatou com a Banca.";
	next;
	goto L_Play;


//==================================
	// Subfunção para lidar / puxar as cartas
sF_GetCards:
	set @rnd, rand(1,13);
	if($@card[@rnd] == 4) goto sF_GetCards;
	set $@card[@rnd], $@card[@rnd] + 1;
	set getarg(1), @rnd;
	if(getarg(1) > 10) set getarg(1), 10;
	if(getarg(1) == 1 && getarg(3) < 1) set getarg(1), 11;
	if(getarg(1) == 11) set getarg(3), 1;
	set getarg(2), " " + getarg(1) + " ";
	if(@rnd == 10) set getarg(2), getarg(1);
	if(@rnd == 1) set getarg(2), " A ";
	if(@rnd == 11) set getarg(2), " J ";
	if(@rnd == 12) set getarg(2), " Q ";
	if(@rnd == 13) set getarg(2), " K ";
	set getarg(0), getarg(0) + 1;
	return;

//==================================
	// Subfunção para obter a pontuação total de cada mão
sF_GetTot:
	set @i, 0;
	set @dealTot, 0;
	set @playTot, 0;

GetDealTot:
	set @dealTot, @dealTot + @dealCard[@i];
	set @i, @i + 1;
	if(@i < @numD) goto GetDealTot;
	if(@dAce == 1 && @dealTot > 21) set @dealTot, @dealTot - 10;
	set @i, 0;
GetPlayTot:
	set @playTot, @playTot + @playCard[@i];
	set @i, @i + 1;
	if(@i < @numP) goto GetPlayTot;
	if(@pAce == 1 && @playTot > 21) set @pAce, 2;
	if(@pAce > 0 && @playTot > 21) set @playTot, @playTot - 10;
	return;

//=======================================
	// Subfunção para exibir os cartas
sF_D2cards:
	mes "    .-----.   .-----. ";
	mes "    | "+@dealCard$[0]+" |   | "+@dealCard$[1]+" | ";
	mes "    '-----'   '-----' ";
	return;
sF_P2cards:
	mes "    .-----.   .-----. ";
	mes "    | "+@playCard$[0]+" |   | "+@playCard$[1]+" | ";
	mes "    '-----'   '-----' ";
	return;
sF_D3cards:
	mes "    .-----.   .-----.   .-----. ";
	mes "    | "+@dealCard$[0]+" |   | "+@dealCard$[1]+" |   | "+@dealCard$[2]+" | ";
	mes "    '-----'   '-----'    '-----' ";
	return;
sF_P3cards:
	mes "    .-----.   .-----.   .-----. ";
	mes "    | "+@playCard$[0]+" |   | "+@playCard$[1]+" |   | "+@playCard$[2]+" | ";
	mes "    '-----'   '-----'    '-----' ";
	return;
sF_D4cards:
	mes " .-----.  .-----.  .-----. ";
	mes " | "+@dealCard$[0]+" |  | "+@dealCard$[1]+" |  | "+@dealCard$[2]+" | ";
	mes " '-----'  '-----'   '-----' ";
	mes "    .-----.  ";
	mes "    | "+@dealCard$[3]+" |";
	mes "    '-----'   ";
	return;
sF_P4cards:
	mes " .-----.  .-----.  .-----. ";
	mes " | "+@playCard$[0]+" |  | "+@playCard$[1]+" |  | "+@playCard$[2]+" |";
	mes " '-----'  '-----'   '-----' ";
	mes "    .-----.  ";
	mes "    | "+@playCard$[3]+" |";
	mes "    '-----'   ";
	return;
sF_D5cards:
	mes " .-----.  .-----.  .-----. ";
	mes " | "+@dealCard$[0]+" |  | "+@dealCard$[1]+" |  | "+@dealCard$[2]+" | ";
	mes " '-----'  '-----'   '-----' ";
	mes "    .-----.   .-----. ";
	mes "    | "+@dealCard$[3]+" |   | "+@dealCard$[4]+" | ";
	mes "    '-----'   '-----' ";
	return;
sF_P5cards:
	mes " .-----.  .-----.  .-----. ";
	mes " | "+@playCard$[0]+" |  | "+@playCard$[1]+" |  | "+@playCard$[2]+" | ";
	mes " '-----'  '-----'   '-----' ";
	mes "    .-----.   .-----. ";
	mes "    | "+@playCard$[3]+" |   | "+@playCard$[4]+" | ";
	mes "    '-----'   '-----' ";
	return;
}
